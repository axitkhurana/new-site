<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Decorators on AxitKhurana</title>
    <link>http://axitkhurana.com/tags/decorators/</link>
    <description>Recent content in Decorators on AxitKhurana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Jun 2012 19:36:00 +0000</lastBuildDate>
    
	<atom:link href="http://axitkhurana.com/tags/decorators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Decorators</title>
      <link>http://axitkhurana.com/blog/python-decorators/</link>
      <pubDate>Sat, 09 Jun 2012 19:36:00 +0000</pubDate>
      
      <guid>http://axitkhurana.com/blog/python-decorators/</guid>
      <description>We know python functions are objects:
can be assigned to a variable can be defined in another function Hence, a function can return another function.
Decorators are wrappers, they let you execute code before and after a function without the need to modify the function itself.
1 def decorator(fn): 2  def wrapper(): 3  print &amp;ldquo;Before fn runs&amp;rdquo; 4  fn() 5  print &amp;ldquo;After fn runs&amp;rdquo; 6  return wrapperÂ  Decorator syntax:</description>
    </item>
    
  </channel>
</rss>